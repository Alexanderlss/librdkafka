version: 2.1

orbs:
  # cimg/base-stable?
  python: circleci/python@1.2
  win: circleci/windows@2.2.0

common_params: &COMMON_PARAMS
  parameters:
    fixme:
      type: string
      default: v1.8.2

commands:


jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.8
    environment:
      LD_LIBRARY_PATH: ~/destdir/lib
    steps:
      - run:
         name: Print envs
         command: env | grep LD_LIBRARY
      - checkout
      - run:
          name: Build
          command: ./configure && make -j && make -C tests -j build
      - run:
          name: Run tests
          # FIXME: Skip integration tests for now as Docker networking is a bit of an issue with trivup
          #  TODO: Look into port-forwarding in trivup&docker.
          command: make -C tests run_local_quick

  build-linux:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      # Wheels are built using manylinux docker images
      - setup_remote_docker:
          version: 19.03.13

  # Windows: Visual Studio project builder
  build-windows-vs:
    <<: *COMMON_PARAMS
    parameters:
      platform:
        type: string
        default: x64
      runtime:
        type: string
        default: v140
    executor: win/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-windows-vcpkg-installed
      - run:
          name: "Install CoApp"
          command: .\win32\install-coapp.ps1
          shell: powershell.exe
      - run:
          name: "Update vcpkg: FIXME"
          command: vcpkg help
          shell: cmd.exe
      - run:
          name: "Install vcpkgs"
          command: vcpkg --feature-flags=versions install --triplet <<parameters.platform>>-windows
          shell: cmd.exe
      - save_cache:
          key: v1-windows-vcpkg-installed
          paths:
            - c:\tools\vcpkg\installed
            - c:\Users\appveyor\AppData\Local\vcpkg\archives
            - c:\Users\appveyor\AppData\Local\vcpkg\installed
      - run:
          name: "Clean librdkafka (msbuild)"
          command: msbuild win32\librdkafka.sln /p:Configuration=Release /p:Platform=<<parameters.platform>> /target:Clean
          shell: cmd.exe
      - run:
          name: "Build librdkafka (<<parameters.platform>>, msbuild)"
          command: msbuild win32\librdkafka.sln /p:Configuration=Release /p:Platform=<<parameters.platform>>
      - run:
          name: "Test"
          command: cd tests &&  ..\win32\outdir\<<parameters.runtime>>\<<parameters.platform>>\Release\tests.exe -l -Q -p1 && cd ..
          shell: cmd.exe
      - run:
          name: "Creating nuget packages"
          command: win32\build-package.bat
      - run:
          name: "Collect artifacts"
          command: mkdir -p artifacts && cp -v win32/outdir/<<parameters.runtime>>/<<parameters.platform>>/Release\*.{dll,lib,pdb} *.nupkg artifacts/
          shell: bash.exe
      - store_artifacts:
          path: artifacts

  # Windows: MinGW builder
  build-windows-mingw:
    <<: *COMMON_PARAMS
    parameters:
      platform:
        type: string
        default: x64
      runtime:
        type: string
        default: v140
    executor: win/default
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-windows-vcpkg-installed
      - run:
          name: "Install CoApp"
          command: .\win32\install-coapp.ps1
          shell: powershell.exe
      - run:
          name: "Update vcpkg: FIXME"
          command: vcpkg help
          shell: cmd.exe
      - run:
          name: "Install vcpkgs"
          command: vcpkg --feature-flags=versions install --triplet <<parameters.platform>>-windows
          shell: cmd.exe
      - save_cache:
          key: v1-windows-vcpkg-installed
          paths:
            - c:\tools\vcpkg\installed
            - c:\Users\appveyor\AppData\Local\vcpkg\archives
            - c:\Users\appveyor\AppData\Local\vcpkg\installed
      - run:
          name: "Clean librdkafka (msbuild)"
          command: msbuild win32\librdkafka.sln /p:Configuration=Release /p:Platform=<<parameters.platform>> /target:Clean
          shell: cmd.exe
      - run:
          name: "Build librdkafka (<<parameters.platform>>, msbuild)"
          command: msbuild win32\librdkafka.sln /p:Configuration=Release /p:Platform=<<parameters.platform>>
      - run:
          name: "Test"
          command: cd tests &&  ..\win32\outdir\<<parameters.runtime>>\<<parameters.platform>>\Release\tests.exe -l -Q -p1 && cd ..
          shell: cmd.exe
      - run:
          name: "Creating nuget packages"
          command: win32\build-package.bat
      - run:
          name: "Collect artifacts"
          command: mkdir -p artifacts && cp -v win32/outdir/<<parameters.runtime>>/<<parameters.platform>>/Release\*.{dll,lib,pdb} *.nupkg artifacts/
          shell: bash.exe
      - store_artifacts:
          path: artifacts

  build-wheels-osx:
    macos:
      xcode: 12.5.1
    steps:
      - checkout
      - build-wheels

tag_only: &TAG_ONLY
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

workflows:
  build:
    jobs:
      - build-and-test
      - build-windows-vs
      - build-windows-mingw

#  build-wheels-all:
#    jobs:
#      - build-wheels-linux:
#          <<: *TAG_ONLY
#      - build-wheels-windows:
#          <<: *TAG_ONLY
#      - build-wheels-osx:
#          <<: *TAG_ONLY
